# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EH0iexfUqmvaY7BTIP-KiWV_nHUfCuZl
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import os
import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from sklearn import ensemble
from sklearn.metrics import mean_squared_error
import joblib
# %matplotlib inline


root = os.path.join(os.getcwd(), "drive", "MyDrive", "Colab Notebooks")

root = os.path.join(root, 'socar_usage_processed.csv')


df = pd.read_csv(root)
df.head(3)

# 임의의 컬럼 삭제 -> tree 구조에서는 원핫인코딩은 도움이 되지 않는다고 합니다.
drop_col = ['member_id', 'member_gender','region',
            'reservation_return_at','reservation_start_at',
            'member_created_date','car_name']

df = df.drop(columns=drop_col)

car_type = df.car_type.unique().tolist()

# 레이블 인코딩
def encoding_features(x):
    features = df.car_type.unique().tolist()
    
    le = preprocessing.LabelEncoder()
    le.fit(x)
    label = le.transform(x)

    return label

df['car_type']=encoding_features(df['car_type'])

x = df.drop(['car_type'], axis=1) #feature
y = df['car_type'] #target

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# 모델 설정
model = RandomForestClassifier()
#model = 다른 모델 사용가능

# 그리드 서치 파라미터 설정
param_grid = {#'max_iter':[50, 100, 200, 300],
              'n_estimators': [200, 300],
              'max_depth': [30,40],
              'min_samples_split' : [25,30],
              'min_samples_leaf': [25,30,40],
              }

grid_search = GridSearchCV(estimator = model, 
                           param_grid = param_grid,
                           cv = 5)

grid_search.fit(x_train, y_train)
best_param = grid_search.best_params_

# 최적 파라미터와 결과
print(best_param)
print('best score : {}'.format(grid_search.best_score_))













